using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using System.Data.SqlClient;
using DevExpress.XtraGrid.Views.Base;
using DevExpress.XtraGrid.Columns;
using System.Collections;

namespace SaleApp
{
    public partial class PriceList : DevExpress.XtraEditors.XtraForm, GridControlInterface
    {
        ArrayList crList = new ArrayList();

        public PriceList()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            productsTableAdapter1.Fill(salesDatabaseDataSet1.Products);
        }

        private void PriceList_Load(object sender, EventArgs e)
        {
            LoadAdapters();
        }

        private string getCurrency(int currencyId)
        {
            string currency = "USD";
            DataRow[] dr = this.salesDatabaseDataSet.Currencies.Select("currency_id = '" + currencyId + "'");

            if (dr.Length > 0)
            {
                currency = dr[0]["NAME"].ToString();
            }

            return currency;
        }


        private void gridView1_CustomColumnDisplayText(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnDisplayTextEventArgs e)
        {
            ColumnView view = sender as ColumnView;

            int currencyId = (int)view.GetListSourceRowCellValue(e.ListSourceRowIndex, "currency_id");
            string currencyType = getCurrency(currencyId);

            if (e.Column.FieldName == "price" && e.ListSourceRowIndex != DevExpress.XtraGrid.GridControl.InvalidRowHandle)
            {
                e.Column.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
                e.Column.DisplayFormat.FormatString = "{0} " + currencyType;
            } else if (e.Column.FieldName == "Total" && e.ListSourceRowIndex != DevExpress.XtraGrid.GridControl.InvalidRowHandle)
            {
                e.Column.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
                e.Column.DisplayFormat.FormatString = "{0} " + currencyType;
            }
        }

        public void ShowCurrency(int currency_id, bool isVisible)
        {
            if (isVisible && !crList.Contains(currency_id))
            {
                crList.Add(currency_id);
                AddCurrency(currency_id);
            } else if (!isVisible && crList.Contains(currency_id))
            {
                crList.Remove(currency_id);
                RemoveColumn(currency_id);
            }

        }

        private void RemoveColumn(int currencyId)
        {
            string currencyType = getCurrency(currencyId);
            GridColumn dc = priceListGrid.Columns.ColumnByFieldName("Price (" + currencyType + ")");
            priceListGrid.Columns.Remove(dc);
        }


        private double getExchange(int fromCurrency, int toCurrency)
        {
            double changeValue = 0;

             DataRow[] dr = this.salesDatabaseDataSet.Exchange.Select("currency_from_id = '" + fromCurrency + "' " +
               "AND currency_to_id = '" + toCurrency + "'");
            int count = this.salesDatabaseDataSet.Exchange.Count;

            if (dr.Length > 0)
            {
                changeValue = Convert.ToDouble(dr[0]["CONVERSION_VALUE"].ToString());
            }
            return changeValue;
        }

        private void AddCurrency(int currencyId)
        {
            string currencyType = getCurrency(currencyId);

            GridColumn unbColumn = priceListGrid.Columns.AddField("Price (" + currencyType + ")");
            unbColumn.VisibleIndex = priceListGrid.Columns.Count;
            unbColumn.UnboundType = DevExpress.Data.UnboundColumnType.Decimal;
            // Disable editing.
            unbColumn.OptionsColumn.AllowEdit = false;
            // Specify format settings.
            unbColumn.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
            // Customize the appearance settings.
            unbColumn.AppearanceCell.BackColor = Color.LemonChiffon;
        }

      
        private void gridView1_CustomUnboundColumnData_1(object sender, CustomColumnDataEventArgs e)
        {

            ColumnView view = sender as ColumnView;

            foreach (int i in crList)
            {
                int currencyId = (int)view.GetListSourceRowCellValue(e.ListSourceRowIndex, "currency_id");
                double price = Convert.ToDouble(view.GetListSourceRowCellValue(e.ListSourceRowIndex, "price"));
                string fielName = "Price (" + getCurrency(i) + ")";
                if (e.Column.FieldName == fielName && e.IsGetData)
                {
                    double exchangeRate = getExchange(currencyId, i);

                    e.Value = Math.Round(price * exchangeRate,4);
                    e.Column.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
                    e.Column.DisplayFormat.FormatString = "{0} " + getCurrency(i);

                }
            }

        }



        public void AddNewRow()
        {

        }

        public void DeleteRow()
        {
            priceListGrid.DeleteSelectedRows();
        }

        public void ExportExcel()
        {
            Utilities.Export(Utilities.EXPORT_EXCEL, "pricelist", priceListGrid);
        }

        public void ExportPdf()
        {
            Utilities.Export(Utilities.EXPORT_PDF, "pricelist", priceListGrid);
        }

        public void PrintPage()
        {
            priceListGrid.Print();
        }

        public void ChangeCurrency()
        {   
            
        }

        public void MergeCells()
        {
            priceListGrid.OptionsView.AllowCellMerge = !priceListGrid.OptionsView.AllowCellMerge;
        }

        public void SaveRows()
        {
           
        }

        private void LoadAdapters()
        {
            // TODO: This line of code loads data into the 'salesDatabaseDataSet.Exchange' table. You can move, or remove it, as needed.
            this.exchangeTableAdapter.Fill(this.salesDatabaseDataSet.Exchange);
            // TODO: This line of code loads data into the 'salesDatabaseDataSet.Currencies' table. You can move, or remove it, as needed.
            this.currenciesTableAdapter.Fill(this.salesDatabaseDataSet.Currencies);
            // TODO: This line of code loads data into the 'salesDatabaseDataSet.Parfume_Sizes' table. You can move, or remove it, as needed.
            this.parfume_SizesTableAdapter.Fill(this.salesDatabaseDataSet.Parfume_Sizes);
            // TODO: This line of code loads data into the 'salesDatabaseDataSet.Parfume_Types' table. You can move, or remove it, as needed.
            this.parfume_TypesTableAdapter.Fill(this.salesDatabaseDataSet.Parfume_Types);
            // TODO: This line of code loads data into the 'salesDatabaseDataSet.Brands' table. You can move, or remove it, as needed.
            this.brandsTableAdapter.Fill(this.salesDatabaseDataSet.Brands);
        }

        public void RefreshRows()
        {
            LoadAdapters();
        }

        public void ShowHideColumns()
        {
            priceListGrid.ShowCustomization();
            priceListGrid.CustomizationForm.Text = "Customize Box";
            priceListGrid.CustomizationForm.Opacity = 0.7;
            priceListGrid.CustomizationForm.FormBorderStyle = FormBorderStyle.FixedDialog;
        }

        public void ChangeFontWeight(int type, bool isActive)
        {
            throw new NotImplementedException();
        }

        public void ChangeBackColor()
        {
            throw new NotImplementedException();
        }
    }
}